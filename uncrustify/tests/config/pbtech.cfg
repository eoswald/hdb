newlines                                = auto     	# auto/lf/crlf/cr
input_tab_size                          = 4
output_tab_size                         = 4

tok_split_gte							= true		# tweaks for termplate >= etc

#
# Indenting
#
indent_columns                           = 4
indent_with_tabs                         = 0
indent_cmt_with_tabs                     = false
indent_brace                             = 0        # Spaces to indent '{' from level
indent_namespace                         = true    	# the 'namespace' body is indented
indent_extern                            = true 	# Whether the 'extern "C"' body is indented
indent_class                             = true		# method declarations and definitions
indent_class_colon                       = true    	# indent the stuff after a leading class colon
indent_ctor_init_leading					= 4		# virtual indent from the ':' for member initializers. Default is 2. (applies to the leading colon case)
indent_ctor_init                         = 0        # # Additional indenting for constructor initializer list
indent_label                             = 0        # indent goto labels
indent_access_spec                       = -4       # Same as indent_label, but for access specifiers that are followed by a colon

#
# Spacing options
#
sp_arith                                = add
sp_assign                               = add
sp_assign_default                       = add
sp_enum_assign                          = add
sp_bool                                 = add

sp_before_ptr_star                      = add
sp_after_ptr_star                       = remove
sp_before_byref                         = add
sp_after_byref                          = remove

sp_angle_shift                          = remove
sp_permit_cpp11_shift					= true
sp_cpp_lambda_assign 					= remove
sp_cpp_lambda_paren						= remove

sp_before_sparen                        = add
sp_after_semi_for_empty                 = remove

sp_after_comma                          = add
sp_before_comma                         = remove
sp_paren_comma                          = force
sp_after_class_colon                    = add
sp_before_case_colon                    = remove
sp_after_operator                       = remove
sp_after_operator_sym                   = remove
sp_after_cast                           = remove
sp_cpp_cast_paren                       = remove
sp_cmt_cpp_start                        = add

#
# Code alignment (not left column spaces/tabs)
#

align_keep_tabs                         = false    	# keep non-indenting tabs
align_with_tabs                         = false    	# false/true
align_on_tabstop                        = true    	# bump out to the next tab when aligning

align_var_def_span                      = 1        	# The span for aligning variable definitions (0=don't align)
align_var_def_star_style                = 1        	# number
align_var_def_amp_style                 = 1        	# number
align_var_struct_span                   = 1     	# number

#
# Newline adding and removing options
#

nl_enum_brace                            = add   	# newline between 'enum' and '{'

# Add or remove newline between 'struct and '{'
nl_struct_brace                          = add   # ignore/add/remove/force

# Add or remove newline between 'union' and '{'
nl_union_brace                           = ignore   # ignore/add/remove/force

# Add or remove newline between 'if' and '{'
nl_if_brace                              = add   # ignore/add/remove/force

# Add or remove newline between '}' and 'else'
nl_brace_else                            = add   # ignore/add/remove/force

# Add or remove newline between 'else if' and '{'
# If set to ignore, nl_if_brace is used instead
nl_elseif_brace                          = add   # ignore/add/remove/force

# Add or remove newline between 'else' and '{'
nl_else_brace                            = add   # ignore/add/remove/force

nl_try_brace                             = add   	# newline between 'try' and '{'
nl_for_brace                             = add   	# newline between 'for' and '{'
nl_catch_brace                           = add   	# newline between 'catch' and '{'
nl_brace_catch                           = add   	# newline between '}' and 'catch'
nl_while_brace                           = add   	# newline between 'while' and '{'
nl_do_brace                              = add   	# newline between 'do' and '{'
nl_brace_while                           = remove   # newline between '}' and 'while' of 'do' statement
nl_switch_brace                          = add		# newline between 'switch' and '{'
nl_after_case                            = true		# Whether to put a newline after 'case' statement
nl_namespace_brace                       = add 		# Newline between namespace and {
nl_class_brace                           = add   	# newline between 'class' and '{'
nl_after_vbrace_close                    = true    	# newline before return in: 'if (foo) a++; return;'
nl_after_do                              = add   	# blank line after 'do/while' statement

#
# Positioning options
#

# The position of the comma in the constructor initialization list
pos_class_comma                          = trail   # ignore/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of colons between constructor and member initialization
pos_class_colon                          = lead   # ignore/lead/lead_break/lead_force/trail/trail_break/trail_force

#
# Code modifying options (non-whitespace)
#

mod_remove_empty_return                  = true

set FOR BOOST_FOREACH
